1:		rails new famousPlacesFromStuk

2:		// git repository
		create new repository in github, then inside terminal type those
		git init
		git add .
		git commit -m "first commit"
		git remote add origin https://github.com/MOHMOHSAN/famousPlacesFromStuk.git
		git push -u origin master 
		then refresh github website and will see project is imported


3:		//add bootstrap 
		gem 'twitter-bootstrap-rails', :git => 'git://github.com/seyhunak/twitter-bootstrap-rails.git'
		bundle install
		rails g bootstrap:install static

		then add to git
		git add --all
		git commit -m "add bootstrap"
		git push -u origin master


4:		// add font awesome from https://github.com/bokmann/font-awesome-rails
		gem "font-awesome-rails"
		bundle install
		inside stylesheets >  application.css	> under tree 
		*= require font-awesome

		then add to git
		git add --all
		git commit -m "add fontawesome"
		git push -u origin master


5:		//add simple form gem
		gem 'simple_form'
		bundle install

		rails g simple_form:install --bootstrap

		git add --all
		git commit -m "Installed simple form"
		git push -u origin master



6:		// create home controller
		rails g controller pages home
		and change route.rb > root to: 'pages#home'

		git add --all
		git commit -m "added home page"
		git push  origin master


7:		// create nav bar (header)
		views > created file called _header.html.erb , copy this

		<nav class="navbar navbar-default">
		  <div class="container-fluid">
		    <!-- Brand and toggle get grouped for better mobile display -->
		    <div class="navbar-header">
		      <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
		        <span class="sr-only">Toggle navigation</span>
		        <span class="icon-bar"></span>
		        <span class="icon-bar"></span>
		        <span class="icon-bar"></span>
		      </button>
		      <%= link_to "Stukplaces", root_path , class: "navbar-brand" %>
		    </div>

		    <!-- Collect the nav links, forms, and other content for toggling -->
		    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
		      <ul class="nav navbar-nav">
		        <li><a href="#">Places</a></li>
		      </ul>
		      <form class="navbar-form navbar-left" role="search">
		        <div class="form-group">
		          <input type="text" class="form-control" placeholder="Search">
		        </div>
		        <button type="submit" class="btn btn-default">Submit</button>
		      </form>
		      <ul class="nav navbar-nav navbar-right">
		        <% if current_user %>
		          <li><%= link_to "Settings", edit_user_registration_path %></li>
		          <li><%= link_to "Logout", destroy_user_session_path, method: :delete %></li>
		        <% else %>
		          <li><%= link_to "Login", new_user_session_path %></li>
		          <li><%= link_to "Signup", new_user_registration_path %></li>
		        <% end %>
		      
		      </ul>
		    </div><!-- /.navbar-collapse -->
		  </div><!-- /.container-fluid -->
		</nav>

		inside views > application.html.erb > before yield > <%= render "layout/header" %>


8:		// create devise gem
		gem 'devise'
		inside terminal,
		rails generate devise:install
		rails generate devise User
		rails generate devise:views

		go to db >migrate file , add name:string on top of email then
		rake db:migrate

		// go to model > user.rb > validates_presence_of :name

		create new file called registrations_controller.rb and copy this
		class RegistrationsController < Devise::RegistraitonsController
			private

			def sign_up_params
				params.require(:user).permit(:name,:email,:password)
			end

			def account_update_params
				params.require(:user).permit(:name,:email,:password,:current_password)
			end
		end

		go to route.rb
		devise_for:users, controllers: { registrations: "registrations"} 
		// controllers must be plural not singular

		views > regirstraions > new.html.erb > 
		remove password_confirmation field and add
		<%= f.input :name,required: true, autofocus:true %> and remove autofocus from email

		and change edit file exactly same as new file also

		git add --all
		git commit -m "added devise gem"
		git push  origin master


		** note simple form gem must install first before devise. Or if form gem is installed later,
		u have to destroy views and generate devise views again to use form gem
		rails d devise:views then rails g devise:views


9:		//----------- flash message	-------------//
		Add the following code after the render of header partial and outside container:
			<% flash.each do |type,message| %>
				<div class="alert alert-info fade-in">
					<button class="close" data-dismiss="alert">x</button>
					<%= message %>
				</div>
			<% end %>


		then inside stylesheet > pages.scss copy this
		.alert{
			position: absolute;
			z-index: 1;
			width: 200px;
		}


		git add --all
		git commit -m "added flashed message"
		git push  origin master



10:		//---------- adding gravators ------------- //
		make ur own https://en.gravatar.com for ur email address then
		add gem from https://github.com/lwe/gravatarify

		gem 'gravatarify', '~> 3.0.0' 

		then inside regirstrations > edit.html.erb > below Update button add
		<br/>
		<%= gravatar_tag current_user.email, size: 100 %> , then restart server
		then
		<%= link_to "Change Avatar", "https://en.gravatar.com/" %>

		if will grab image from gravator website and put here

		git add --all
		git commit -m "added gravator"
		git push  origin master


11:		//---------- generating scaffold Places --------//
		rails generate scaffold places name:string address:string description:text phone:string website:string user_id:integer --no-stylesheets

		rake db:migrate

		inside  models > places.rb
			belongs_to :user
	
			validates_presence_of :name
			validates_presence_of :phone
			validates_presence_of :address
			validates_presence_of :website
			validates_presence_of :user_id

		and inside models > user.rb
			has_many :places , dependent: :destroy

		and inside _header.html.erb, change <li><a href="#">Places</a></li> to
			 <li><%= link_to "Places",places_path %></li>

		and inside places > index.html.erb > remove some column and notice message 
		<h1>Listing Places</h1>

		<table class="table">
		  <thead>
		    <tr>
		      <th>Name</th>
		      <th>Address</th>
		      <th>Phone</th>
		      <th>Website</th>
		     
		      <th colspan="3"></th>
		    </tr>
		  </thead>

		  <tbody>
		    <% @places.each do |place| %>
		      <tr>
		        <td><%= place.name %></td>
		        <td><%= place.address %></td>
		        <td><%= place.phone %></td>
		        <td><%= place.website %></td>
		    
		      </tr>
		    <% end %>
		  </tbody>
		</table>

		<br>
		<% if current_user %>
		  <%= link_to 'New Place', new_place_path %>
		<% end %>


		then inside views > places > _form.htm.erb > add javascript validation like this
			<%= f.input :user_id,required: true %> for name, address, phone, website, user_id

		then inside config > initializers > simple_form.rb 
		change to  config.browser_validations = true
		** note safari won't show javascript validation


		git add .
		git commit -m "generate scaffold places"
		git push origin master


12:		//------------- associate places and user model ---------- //
		places_controller.rb,
		before_action :authenticate_user!, only: [:new,:edit,:destroy,:create,:update]
		def create
			@place = current_user.places.new(place_params)

		then places > _form > remove user_id field

		git add .
		git commit -m "added current user to places"
		git push origin master



13:		//--------- geolocation -------
		geocoding from https://github.com/alexreisner/geocoder

		before that , delete all records from places
		Place.all.delete_all

		gem 'geocoder' 

		rails g migration AddMapToPlaces latitude:float longitude:float

		inside APP > MODELS > PLACE.RB
		geocoded_by :address
		after_validation :geocode

		** very important latitude and longitude must be exactly same can't give new names for that model
		cos it is integrated inside gem

		inside show.html.erb , add
		<%= @place.latitude %>
		<%= @place.longitude %>

Note : *** if u got messed up everything in migration, 
		As I didn't care if the DB data was deleted, this is how I fixed it:

		Drop the entire database rake db:drop
		Edit the [timestamp]_migration_name.rb file to correctly say boolean
		Create the database again rake db:create
		Migrate the data rake db:migrate


		// create google map
		copy javascript link to application.html.erb under csrf tag
		<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=yourkey"></script>
		**yourkey is google developer account key



		// copy under <%= @place.latitude %> , inside show.html.erb

		<div id="map-canvas" style="width: 230px; height: 230px;"></div>


		<script type="text/javascript">
		      function initialize() {
		        var mycenter = { lat: <%= @place.latitude %>, lng: <%= @place.longitude %>}
		        var mapOptions = {
		          center: mycenter,
		          zoom: 8
		        };
		        var map = new google.maps.Map(document.getElementById('map-canvas'),
		            mapOptions);
		        var marker = new google.maps.Marker({
		          position: mycenter,
		          map: map
		        });
		      }
		      google.maps.event.addDomListener(window, 'load', initialize);
		 </script>


		 ** note if u use leaflet , u don't need api key but need to import leaflet css and js 


		 //add to github

		git add .
		git commit -m "Added maps to places"
		git push origin master


14:		// ------------- styling views> places > show.html.erb a little bit
		 <div class="row">
		    <div class="col-md-3">
		      <h3><%= @place.name %></h3>
		      <p>
		        <strong>Address:</strong>
		        <%= @place.address %>
		      </p>

		      <p>
		        <strong>Phone:</strong>
		        <%= @place.phone %>
		      </p>

		      <p>
		        <strong>Website:</strong>
		        <%= @place.website %>
		      </p>
		      
		       <p>
		        <strong>Description:</strong>
		        <%=  @place.description %>
		      </p>

		       <div id="map-canvas" style="width: 230px; height: 230px;"></div>
		 
		   </div>
		   <div class="col-md-6">
		    <h3>Reviews by People</h3>
		  </div> -----------
		</div>
		javascript part remain the same here


		// add to github
		git add --all
		git commit -m "Made places better"
		git push origin master



15:    	// -------------- creating review models ------------------ //
		
		(i)
		rails generate model review place_id:integer user_id:integer content:text
		rake db:migrate

		(ii)
		inside models > review.rb
			belongs_to :place
			belongs_to :user
			validates_presence_of :content


		(iii)
		inside models > user.rb and place.rb
			has_many :reviews, dependent: :destroy


		(iv)
		create new controller called reviews_controller.rb and pasted this
			class ReviewsController < ApplicationController
				before_action :authenticate_user! 
				before_action :set_review, only: [:edit,:update,:destroy]

				def edit
					@place = @review.place
				end

				def create
					@review = current_user.reviews.new(review_params)
					puts @review

				    respond_to do |format|
				      if @review.save
				        format.html { redirect_to place_path(@review.place), notice: 'Review was successfully created.' }
				        format.json { render :show, status: :created, location: @review }
				      else
				      	redirect_to place_path(@review.place),notice: "Something went wrong"
				      end
				    end
				  end

				def update
					respond_to do |format|
				      if @review.update(review_params)
				        format.html { redirect_to place_path(@review.place), notice: 'Review was successfully updated.' }
				        format.json { render :show, status: :ok, location: @review }
				      else
				       redirect_to place_path(@review.place),notice: "Something went wrong"
				      end
				    end
				end

				def destroy
					@review.destroy
				    respond_to do |format|
				      format.html { redirect_to place_path(@review.place), notice: 'Review was successfully destroyed.' }
				    end
				end

				private

				def set_review
					@review = Review.find(params[:id])
				end

				def review_params
					params.require(:review).permit(:content,:place_id)
				end
			end
					or
			class ReviewsController < ApplicationController
			  before_action :authenticate_user!
			  before_action :set_review, only: [:edit, :update, :destroy]

			  respond_to :html

			  def edit
			    @place = @review.place
			  end

			  def create
			    @review = current_user.reviews.new(review_params)
			    @review.save
			    respond_with(@review)
			  end

			  def update
			    @review.update(review_params)
			    respond_with(@review)
			  end

			  def destroy
			    @review.destroy
			    respond_with(@review)
			  end

			  private
			    def set_review
			      @review = Review.find(params[:id])
			    end

			    def review_params
			      params.require(:review).permit(:place_id, :content)
			    end
			end



		(v)
		create new folder inside views and called reviews
		create views > reviews > _form.html.erb and copy this
			<%= simple_form_for(@review) do |f| %>
			  <%= f.error_notification %>

			  <div class="form-inputs">
			    <%= f.input :content , required: true %>
			    <%= f.hidden_field :place_id,required: true , value: @place.id %>
			  </div>

			  <div class="form-actions">
			    <%= f.button :submit %>
			  </div>
			<% end %>
		** @place.id not @place_id , @place.id is getting from places > show form
		then go to places > show.html.erb > add
			<% if current_user %>
				<%= render 'reviews/form' %>
			<% end %>

		(vi)
		inside places_controller.rb , inside show method
			@review = Review.new => to initailize review
		** need this cos inside places > show.html.erb , we pass @review variable

		(vii)
		add routes 
			resources :reviews

		(viii)	displaying all reviews inside show --------
		inside places_controller.rb , inside show method, add
			@reviews = @place.reviews above @review

		inside views > places > show , add
			<h5>All Reviews</h5>
   			<%= render @reviews %>
   		below create review renderer

   		inside views > reviews , create new file called _review.html.erb and add
   			<%= gravatar_tag review.user.email,size:20 %>
			<%= review.content %> by <%= review.user.name %>
			<% if current_user.id == review.user.id %>
				<%= link_to "Edit Review" , edit_review_path(review) %>
			<% end %>

		(X)	edit reviews --------
			create new file called edit.html.erb
			and add
				<h1>Editing Review</h1>
				<%= render 'form' %>
				<%= link_to 'Back', place_path(@review.place) %>


		(xi)	push to github


16:		//------------ add rating ---------------
		jquery star from https://github.com/wbotelhos/raty

		(i) create new file called raty.js inside javascript folder
			and copy raty javascript


		(ii) copy images star-half, off , on png and 
				open current project folder from terminal using open . then 

			pasted these images

							OR

		(i)	download these 2 files - jquery.raty.css + jquery.raty.js and place them in the vendor/assets correspondent folder(javscripts + stylesheets)

		(ii)	APP/ASSETS/STYLESHEETS/APPLICATION.SCSS
				*= require jquery.raty.css

				APP/ASSETS/JAVASCRIPTS/APPLICATION.JS
				//= require jquery.raty.js

				VENDOR/ASSETS/STYLESHEETS/JQUERY.RATY.CSS , insert
				    .star-on-png:before {
					  content: "\f005";
					}

					.star-off-png:before {
					  content: "\f006";
					}

				Copy the images:
				- star-off.png
				- star-on.png





		(iii) add rating field inside reviews model
				rails g migration AddScoreToReviews score:integer

			  go to that migration file , and add
			  default: 0 at the end of sentence like this 
			  	add_column :places, :total_average_rating, :integer, default: 0

			  then rake db:migrate


		(iv)  add validation inside review.rb
				validates_presence_of :score 


		(v)	 add params new field call score inside reviews_controller.rb
			.permit(:score)


		(vi) inside reviews > _form.html.erb > below input content , copy 
			 	<%= f.hidden_field :score , required: true %>
    			<div class="score"></div>

    			and 
    			<script type="text/javascript">
					$(".score").raty({
						starOn:  "<%= image_path('star-on.png') %>",
						starOff: "<%= image_path('star-off.png') %>",
						target: "#review_score"	,
						targetKeep: true,
						targetType: "number"
					});
				</script>
				** not startOn but starOn


		(v)	inside reviews > _reviews.html.erb
			<div class ="score_<%= review.id %>">
			</div>


		(vi)	go to places > show.html.erb , after map javascript , copy this
				<% @reviews.each do |review| %>
					$(".score_<%= review.id %> ").raty({
						starOn:  "<%= image_path('star-on.png') %>",
						starOff: "<%= image_path('star-off.png') %>",
						score: <%= review.score %>,
						readOnly: true
					});
				<% end %>


		(vii) push to github


17:		//------ adding overall rating for each place -------
			(i)
			rails g migration AddTotalAverageRatingToPlaces total_average_rating:integer
			and add default: 0 inside that migration file
			rake db:migrate

			(ii) add method to calculate overall rating
			inside place.rb
				def average_rating
					self.reviews.sum(:score) / reviews.size
				rescue ZeroDivisionError
					0
				end


			(iii) testing inside rails console
				Place.last.average_rating (// method from place.rb)


			(iv) inside review.rb
					#  create callback function
					after_save :calculate_average

					def calculate_average
						a = self.place.average_rating
						self.place.update_attributes(total_average_rating: a)
					end


			(v)	inside  places > show.html.erb , under name
				
					<div class="average"></div>

					inside javascript part,
					   $(".average").raty({
				        starOn:  "<%= image_path('star-on.png') %>",
				        starOff: "<%= image_path('star-off.png') %>",
				        score: <%= @place.total_average_rating %>,
				        readOnly: true
				      });


18:		//-------------- dashboard -------------//
			
			(i) inside pages_controller.rb

				before_action :authenticate_user! , only: [:dashboard]
				inside 
				def dashboard 
					@user = current_user
				  	@places = @user.places
				  	@reviews = @user.reviews


				inside
				def home
					if current_user
						redirect_to  pages_dashboard_path (for old routes) / dashboard_path (for rename route)


			(ii) inside route.rb

				 get 'pages/dashboard'  or rename route name

				 get 'dashboard' , to: 'pages#dashboard'


			(iii) inside views > pages > create dashborad.html.erb 
					<div class="row">
						<!-- /////////   Profile info  ///////// -->
						<div class="col-md-2">
							<h3><%= @user.name %></h3>
							<%= gravatar_tag @user.email %>
						</div>

						<!-- /////////   Places info  ///////// -->
						<div class="col-md-5">
							<h3>My Places </h3>
							<table class="table">
								<thead>
									<tr>
										<th>Name</th>
										<th>Created</th>
										<th></th>
									</tr>
								</thead>

								<tbody>
									<% @places.each do |place| %>
										<tr>
											<td><%= place.name %></td>
											<td><%= time_ago_in_words(place.created_at)%></td>
											<td><%= link_to "Edit", edit_place_path(place) %> | <%= link_to "Destroy", place_path(place) , method: :delete %></td>
										</tr>
									<% end %>
								</tbody>
							</table>

							<%= link_to "New Place" , new_place_path %>
						</div>


						<!-- /////////   Reviews info  ///////// -->
						<div class="col-md-5">
							<h3>My Reviews</h3>
							<table class="table">
								<thead>
									<tr>
										<th>Place</th>
										<th>Created</th>
										<th>Rating</th>
										<th></th>
									</tr>
								</thead>

								<tbody>
									<% @reviews.each do |review| %>
										<tr>
											<td><%= review.place.name %></td>
											<td><%= time_ago_in_words(review.created_at)%> ago</td>
											<td><div class="score_<%= review.id%>"></div></td>
											<td><%= link_to "Edit", edit_review_path(review) %> | <%= link_to "Destroy", review_path(review) , method: :delete %></td>
										</tr>
									<% end %>
								</tbody>
							</table>

							<%= link_to "New Place" , new_place_path %>
						</div>
					</div>


				<script type="text/javascript">
					<% @reviews.each do |review| %>
				      $(".score_<%= review.id %> ").raty({
				        starOn:  "<%= image_path('star-on.png') %>",
				        starOff: "<%= image_path('star-off.png') %>",
				        score: <%= review.score %>,
				        readOnly: true
				      });
				    <% end %>
				</script>

			(iv) inside _header.html.erb , before setting link,

					<li><%= link_to "Dashboard", dashboard_path %></li>



19 :  //  ------------ Styling landing page -------------
			
			(i) add image to assets > images

			(ii) https://css-tricks.com/perfect-full-page-background-image/
			inside pages > home.html.erb , copy this
				<div  class="text-center landing_title">
					<%= link_to "Find places you'll fall in love with" ,places_path, class: "btn btn-default btn-lg btn-landing" %>
				</div>

			(iii) inside stylesheets / pages.scss
				.landing { 
				  background: image-url("back.jpg") no-repeat center center fixed; 
				  -webkit-background-size: cover;
				  -moz-background-size: cover;
				  -o-background-size: cover;
				  background-size: cover;
				  height: 100vh;
				}

				.landing_title {
					padding-top: 230px;
				}

				.btn-landing {
					background: none;
					border: solid;
				}

				.btn-landing:hover { 
				    background: none;
				     border-color: white;
				}
				.navbar {
				  margin-bottom: 0px;
				}


			(iv) inside application.html.erb , edit like this
					<% if current_page?(root_path) %>
					  <div class="landing">
					<% else %>
					  <div class="container">
					<% end %>
					  <%= yield %>
					  </div>


20:			//------- search form ------------ //
			(i) inside _header.html.erb , change form part
				   	<%= form_tag places_path, method: "get",class: "navbar-form navbar-left" do  %>
			          <div class="form-group">
			            <%= text_field_tag :search ,params[:search], class: "form-control", placeholder: "Search Place" %>
			          </div>
			          <%= submit_tag "Search" , name: nil, class: "btn btn-default" %>
			      	<% end %>
		      ** params[:search] is complusory in search tag , it can be either name: nil or :name => nil


		    (ii) inside place.rb , add new method to find loc
		    		def self.search(search)
						if search
							where(['name LIKE ? OR address LIKE ?', "%#{search}%", "%#{search}%"])
						else
							all
						end
					end


			(iii) inside places_controller.rb , index method
				 @places = Place.search(params[:search])







		






